{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["State","GlobalStyle","createGlobalStyle","default_shellies","id","name","client","connect","setShellyState","shelly","state","publish","App","useState","temp","setTemp","humidity","setHumidity","shellies","setShellies","ids","map","x","useEffect","on","console","log","forEach","subscribe","err","topic","message","Number","startsWith","match","groups","newState","toString","On","Off","xs","s","allOn","useCallback","allOff","className","ButtonContainer","key","Button","onClick","stateToColor","Shelly","toggle","color","IconContainer","size","styled","button","props","div","span","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.05b4d87e.chunk.js","sourcesContent":["import { connect } from 'mqtt';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { IoMdPower } from 'react-icons/io';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    padding: 0;\n    margin: 0;\n    height: 100%;\n\t\twidth: 100%;\n\t\ttext-align: center;\n  }\n`;\n\nenum State {\n\tOn,\n\tOff,\n}\n\ninterface IShelly {\n\tid: string;\n\tname: string;\n\tstate?: State;\n}\n\n// const url = 'mqtt://test.mosquitto.org:8080';\n// const url = 'ws://localhost:9001'\n// const url = 'ws://palletten.northeurope.azurecontainer.io:9001'\n\nconst url = 'wss://palletten.northeurope.azurecontainer.io:8083';\nconst default_shellies: IShelly[] = [\n\t{ id: 'C4402D', name: 'Spisebord' },\n\t{ id: 'C431FB', name: 'Sofa' },\n\t{ id: '10DB9C', name: 'Soveværelse' },\n];\n\nconst client = connect(url);\n\nfunction setShellyState(shelly: IShelly, state: string = 'toggle') {\n\tclient.publish(`shellies/shelly1-${shelly.id}/relay/0/command`, state);\n}\n\nfunction App() {\n\tconst [temp, setTemp] = useState<number | undefined>();\n\tconst [humidity, setHumidity] = useState<number | undefined>();\n\tconst [shellies, setShellies] = useState<IShelly[]>(default_shellies);\n\tconst ids = shellies.map((x) => x.id);\n\n\tuseEffect(() => {\n\t\tclient.on('connect', () => {\n\t\t\tconsole.log('connected');\n\n\t\t\tids.forEach((id) => {\n\t\t\t\tclient.subscribe(`shellies/shelly1-${id}/relay/0`, (err) => {});\n\t\t\t});\n\t\t\tclient.subscribe('temperature', (err) => {});\n\t\t\tclient.subscribe('humidity', (err) => {});\n\t\t});\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tuseEffect(() => {\n\t\tclient.on('message', (topic, message) => {\n\t\t\tswitch (topic) {\n\t\t\t\tcase 'temperature':\n\t\t\t\t\tsetTemp(Number(message));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'humidity':\n\t\t\t\t\tsetHumidity(Number(message));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (topic.startsWith('shellies')) {\n\t\t\t\tconst match = topic.match(/-(?<id>\\w*)/);\n\t\t\t\tif (match?.groups) {\n\t\t\t\t\tconst newState = message.toString() === 'on' ? State.On : State.Off;\n\t\t\t\t\tconst id = match?.groups['id'];\n\t\t\t\t\tsetShellies((xs) =>\n\t\t\t\t\t\txs.map((s) => ({\n\t\t\t\t\t\t\t...s,\n\t\t\t\t\t\t\tstate: s.id === id ? newState : s.state,\n\t\t\t\t\t\t}))\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}, []);\n\n\tconst allOn = useCallback(() => {\n\t\tshellies.forEach((x) => setShellyState(x, 'on'));\n\t}, [shellies]);\n\tconst allOff = useCallback(() => {\n\t\tshellies.forEach((x) => setShellyState(x, 'off'));\n\t}, [shellies]);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<GlobalStyle />\n\t\t\t<h1>Palletten</h1>\n\t\t\t<div>Nuværende temperatur: {temp ?? 'unknown'} &#176;C</div>\n\t\t\t<div>Nuværende fugtighed: {humidity}%</div>\n\t\t\t<ButtonContainer>\n\t\t\t\t{shellies.map((shelly) => (\n\t\t\t\t\t<Shelly key={shelly.id} shelly={shelly} />\n\t\t\t\t))}\n\t\t\t</ButtonContainer>\n\n\t\t\t<hr />\n\t\t\t<Button onClick={allOn}>Tænd alt</Button>\n\t\t\t<Button onClick={allOff}>Sluk alt</Button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\nfunction stateToColor(state?: State): string {\n\tswitch (state) {\n\t\tcase State.Off:\n\t\t\treturn 'red';\n\t\tcase State.On:\n\t\t\treturn 'green';\n\n\t\tdefault:\n\t\t\treturn 'grey';\n\t}\n}\n\nconst Shelly = ({ shelly }: { shelly: IShelly }) => {\n\tconst toggle = useCallback(() => {\n\t\tsetShellyState(shelly);\n\t}, [shelly]);\n\n\treturn (\n\t\t<Button onClick={toggle} color={stateToColor(shelly.state)}>\n\t\t\t<IconContainer>\n\t\t\t\t<IoMdPower size='20px' />\n\t\t\t</IconContainer>\n\t\t\t{shelly.name}\n\t\t</Button>\n\t);\n};\n\nconst Button = styled.button<{ color?: string }>`\n\tbackground-color: ${(props) => props.color ?? 'blue'};\n\tcolor: white;\n\tpadding: 10px;\n\tmargin: 6px;\n\tfont-size: 1.2em;\n\tborder-radius: 6px;\n`;\n\nconst ButtonContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-direction: column;\n\tvertical-align: middle;\n`;\n\nconst IconContainer = styled.span`\n\tdisplay: inline-flex;\n\theight: 100%;\n\tjustify-content: center;\n\tflex-direction: column;\n\tpadding: 0 6px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}