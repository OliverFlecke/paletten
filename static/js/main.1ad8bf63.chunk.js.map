{"version":3,"sources":["Button.tsx","models.ts","PlaceState.tsx","Shelly.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["State","Button","styled","button","props","color","PlaceState","state","name","Container","Name","Wrapper","temperature","humidity","div","h3","Shelly","shelly","toggle","useCallback","setShellyState","onClick","stateToColor","IconContainer","size","GlobalStyle","createGlobalStyle","default_shellies","id","client","connect","publish","getPlace","topic","match","groups","undefined","Off","On","usePlace","useState","setTemperature","setHumidity","App","inside","setters","outside","outSetters","shellies","setShellies","ids","map","x","useEffect","on","console","log","forEach","subscribe","err","message","startsWith","Number","newState","toString","xs","s","allOn","allOff","PlaceContainer","ButtonContainer","key","span","DesiredTemperature","onDesiredTemperatureChange","event","value","currentTarget","valueAsNumber","retain","temp","unsubscribe","TemperatureRange","type","min","max","onChange","input","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1ad8bf63.chunk.js","sourcesContent":["import styled from 'styled-components';\nexport const Button = styled.button<{\n\tcolor?: string;\n}> `\n\tbackground-color: ${(props) => props.color ?? 'blue'};\n\tcolor: white;\n\tpadding: 10px;\n\tmargin: 6px;\n\tfont-size: 1.2em;\n\tborder-radius: 6px;\n`;\n","export enum State {\n\tOn,\n\tOff,\n}\n\nexport interface IShelly {\n\tid: string;\n\tname: string;\n\tstate?: State;\n}\n\nexport interface IPlace {\n\ttemperature?: number;\n\thumidity?: number;\n}\n","import React from 'react';\nimport { IPlace } from './models';\nimport styled from 'styled-components';\n\ninterface PlaceStateProps {\n\tstate: IPlace;\n\tname: string;\n}\n\nexport const PlaceState = ({ state, name }: PlaceStateProps) => {\n\treturn (\n\t\t<Container>\n\t\t\t<Name>{name}</Name>\n\n\t\t\t<Wrapper>\n\t\t\t\tTemperatur: <span>{state.temperature} &#176;C</span>\n\t\t\t</Wrapper>\n\t\t\t<Wrapper>\n\t\t\t\tFugtighed:\n\t\t\t\t<span>{state.humidity} %</span>\n\t\t\t</Wrapper>\n\t\t</Container>\n\t);\n};\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 200px;\n  box-sizing: border-box;\n  padding: 0 10px;\n`;\n\nconst Wrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n  width: 100%;\n`;\n\nconst Name = styled.h3`\n\tpadding: 0;\n\tmargin: 0;\n\tmargin-bottom: 6px;\n`;\n","import React, { useCallback } from 'react';\nimport { IoMdPower } from 'react-icons/io';\nimport { IconContainer, setShellyState, stateToColor } from './App';\nimport { Button } from './Button';\nimport { IShelly } from './models';\n\nexport const Shelly = ({ shelly }: { shelly: IShelly }) => {\n\tconst toggle = useCallback(() => {\n\t\tsetShellyState(shelly);\n\t}, [shelly]);\n\n\treturn (\n\t\t<Button onClick={toggle} color={stateToColor(shelly.state)}>\n\t\t\t<IconContainer>\n\t\t\t\t<IoMdPower size='20px' />\n\t\t\t</IconContainer>\n\t\t\t{shelly.name}\n\t\t</Button>\n\t);\n};\n","import { connect } from 'mqtt';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Button } from './Button';\nimport { IPlace, IShelly, State } from './models';\nimport { PlaceState } from './PlaceState';\nimport { Shelly } from './Shelly';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    padding: 0;\n    margin: 0;\n    height: 100%;\n\t\twidth: 100%;\n\t\ttext-align: center;\n  }\n`;\n\n// const url = 'mqtt://test.mosquitto.org:8080';\n// const url = 'ws://localhost:9001'\n// const url = 'ws://palletten.northeurope.azurecontainer.io:9001'\n\nconst url = 'wss://palletten.northeurope.azurecontainer.io:8083';\nconst default_shellies: IShelly[] = [\n\t{ id: 'C4402D', name: 'Spisebord' },\n\t{ id: 'C431FB', name: 'Sofa' },\n\t{ id: '10DB9C', name: 'Sovev√¶relse' },\n];\n\nconst client = connect(url);\n\nexport function setShellyState(shelly: IShelly, state: string = 'toggle') {\n\tclient.publish(`shellies/shelly1-${shelly.id}/relay/0/command`, state);\n}\n\nfunction getPlace(topic: string): string | undefined {\n\tconst match = topic.match(/\\/(?<place>\\w+)$/);\n\treturn match?.groups ? match?.groups['place'] : undefined;\n}\n\nexport function stateToColor(state?: State): string {\n\tswitch (state) {\n\t\tcase State.Off:\n\t\t\treturn 'red';\n\t\tcase State.On:\n\t\t\treturn 'green';\n\n\t\tdefault:\n\t\t\treturn 'grey';\n\t}\n}\n\nfunction usePlace(): [\n\tIPlace,\n\t{\n\t\tsetTemperature: React.Dispatch<React.SetStateAction<number | undefined>>;\n\t\tsetHumidity: React.Dispatch<React.SetStateAction<number | undefined>>;\n\t}\n] {\n\tconst [temperature, setTemperature] = useState<number | undefined>();\n\tconst [humidity, setHumidity] = useState<number | undefined>();\n\n\treturn [\n\t\t{ temperature, humidity },\n\t\t{ setTemperature, setHumidity },\n\t];\n}\n\nfunction App() {\n\tconst [inside, setters] = usePlace();\n\tconst [outside, outSetters] = usePlace();\n\n\tconst [shellies, setShellies] = useState<IShelly[]>(default_shellies);\n\tconst ids = shellies.map((x) => x.id);\n\n\tuseEffect(() => {\n\t\tclient.on('connect', () => {\n\t\t\tconsole.log('connected');\n\n\t\t\tids.forEach((id) => {\n\t\t\t\tclient.subscribe(`shellies/shelly1-${id}/relay/0`, (err) => {});\n\t\t\t});\n\t\t\t['inside', 'outside'].forEach((x) => {\n\t\t\t\tclient.subscribe(`temperature/${x}`, (err) => {});\n\t\t\t\tclient.subscribe(`humidity/${x}`, (err) => {});\n\t\t\t});\n\t\t});\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tuseEffect(() => {\n\t\tclient.on('message', (topic, message) => {\n\t\t\tif (topic.startsWith('temperature/')) {\n\t\t\t\tswitch (getPlace(topic)) {\n\t\t\t\t\tcase 'inside':\n\t\t\t\t\t\tsetters?.setTemperature(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'outside':\n\t\t\t\t\t\toutSetters?.setTemperature(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (topic.startsWith('humidity/')) {\n\t\t\t\tswitch (getPlace(topic)) {\n\t\t\t\t\tcase 'inside':\n\t\t\t\t\t\tsetters.setHumidity(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'outside':\n\t\t\t\t\t\toutSetters.setHumidity(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic.startsWith('shellies')) {\n\t\t\t\tconst match = topic.match(/-(?<id>\\w*)/);\n\t\t\t\tif (match?.groups) {\n\t\t\t\t\tconst newState = message.toString() === 'on' ? State.On : State.Off;\n\t\t\t\t\tconst id = match?.groups['id'];\n\t\t\t\t\tsetShellies((xs) =>\n\t\t\t\t\t\txs.map((s) => ({\n\t\t\t\t\t\t\t...s,\n\t\t\t\t\t\t\tstate: s.id === id ? newState : s.state,\n\t\t\t\t\t\t}))\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}, [outSetters, setters]);\n\n\tconst allOn = useCallback(() => {\n\t\tshellies.forEach((x) => setShellyState(x, 'on'));\n\t}, [shellies]);\n\tconst allOff = useCallback(() => {\n\t\tshellies.forEach((x) => setShellyState(x, 'off'));\n\t}, [shellies]);\n\n\treturn (\n\t\t<div>\n\t\t\t<GlobalStyle />\n\t\t\t<h1>Palletten</h1>\n\t\t\t<PlaceContainer>\n\t\t\t\t<PlaceState name='Inde' state={inside} />\n\t\t\t\t<PlaceState name='Ude' state={outside} />\n\t\t\t</PlaceContainer>\n\t\t\t<ButtonContainer>\n\t\t\t\t{shellies.map((shelly) => (\n\t\t\t\t\t<Shelly key={shelly.id} shelly={shelly} />\n\t\t\t\t))}\n\t\t\t</ButtonContainer>\n\n\t\t\t<hr />\n\t\t\t<Button onClick={allOn}>T√¶nd alt</Button>\n\t\t\t<Button onClick={allOff}>Sluk alt</Button>\n\n\t\t\t<hr />\n\t\t\t<DesiredTemperature />\n\t\t</div>\n\t);\n}\n\nexport default App;\n\nconst PlaceContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`;\n\nconst ButtonContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-direction: column;\n\tvertical-align: middle;\n`;\n\nexport const IconContainer = styled.span`\n\tdisplay: inline-flex;\n\theight: 100%;\n\tjustify-content: center;\n\tflex-direction: column;\n\tpadding: 0 6px;\n`;\n\nconst DesiredTemperature = () => {\n\tconst [temperature, setTemperature] = useState<number>(0);\n\tconst onDesiredTemperatureChange = useCallback(\n\t\t(event: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst value = event.currentTarget.valueAsNumber;\n\t\t\tsetTemperature(value);\n\t\t\tclient.publish('temperature/set', value.toString(), {\n\t\t\t\tretain: true,\n\t\t\t});\n\t\t},\n\t\t[setTemperature]\n\t);\n\n\tuseEffect(() => {\n\t\tclient.subscribe('temperature/set');\n\t\tclient.on('message', (topic, message) => {\n\t\t\tif (topic === 'temperature/set') {\n\t\t\t\tconst temp = Number(message.toString());\n\t\t\t\tsetTemperature(temp);\n\t\t\t\tclient.unsubscribe('temperature/set');\n\t\t\t}\n\t\t});\n\t}, [setTemperature]);\n\n\treturn (\n\t\t<div>\n\t\t\t<TemperatureRange\n\t\t\t\ttype='range'\n\t\t\t\tmin='0'\n\t\t\t\tmax='25'\n\t\t\t\tvalue={temperature}\n\t\t\t\tonChange={onDesiredTemperatureChange}\n\t\t\t/>\n\t\t\t<div>√ònskede temperature: {temperature} &#176;C</div>\n\t\t</div>\n\t);\n};\n\nconst TemperatureRange = styled.input`\n\twidth: 90%;\n\tbox-sizing: border-box;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}