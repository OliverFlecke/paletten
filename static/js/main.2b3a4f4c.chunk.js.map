{"version":3,"sources":["components/AppTitle.tsx","components/DesiredTemperature.tsx","components/Button.tsx","components/MasterButtons.tsx","models.ts","components/PlaceState.tsx","components/ShellyComponent.tsx","utils/general.ts","components/charts/TemperatureChart.tsx","components/TemperatureHistory.tsx","features/Weather/FalldownVolume.tsx","features/Weather/OpenWeatherMapIcon.tsx","features/Weather/SunriseAndSunset.tsx","features/Weather/weatherApi.tsx","features/Weather/WeatherDetails.tsx","features/Weather/Wind.tsx","features/Weather/CurrentWeather.tsx","serviceWorker.ts","App.tsx","index.tsx"],"names":["titleColors","colors","rose","indigo","teal","lime","purple","cyan","red","amber","AppTitle","className","split","map","c","i","style","color","DesiredTemperature","client","useState","temperature","setTemperature","onDesiredTemperatureChange","useCallback","event","value","currentTarget","valueAsNumber","publish","toString","retain","active","setActive","toggleActive","checked","useEffect","on","topic","message","Number","subscribe","htmlFor","id","type","onChange","hidden","min","max","Button","children","onClick","mapColor","State","MasterButtons","shellies","allOn","forEach","s","setState","allOff","PlaceState","state","name","humidity","Shelly","toggle","commandPath","this","ShellyComponent","shelly","stateToColor","size","On","average","xs","reduce","acc","x","sum","length","axisColor","BarGraph","data","ParentSize","width","margin","xMax","yMax","d","time","y","temp","xScale","scaleBand","range","round","domain","padding","yScale","scaleLinear","Math","compose","scale","accessor","xPoint","yPoint","hourOffset","Date","getTimezoneOffset","height","barHeight","Group","Bar","bandwidth","fill","AxisBottom","top","tickFormat","getHours","stroke","tickStroke","tickLabelProps","fontSize","textAnchor","AxisLeft","left","numTicks","t","TemperatureHistory","inside","setInside","outside","setOutside","startsWith","parseData","TemperatureChart","key","values","JSON","parse","group","date","getFullYear","getMonth","getDate","rv","v","Function","push","Object","keys","hum","reverse","FalldownVolume","props","Icon","OpenWeatherMapIcon","weather","src","icon","title","main","alt","description","loading","SunriseAndSunset","sunrise","sunset","format","apiKey","baseUrl","a","fetch","response","json","dt","sys","WeatherDetails","pressure","visibility","Wind","speed","deg","degree","WindDirectionIcon","CurrentWeather","memo","setWeather","refresh","getCurrentWeather","then","wind","rain","snow","displayName","Title","Temperatures","feels_like","Boolean","window","location","hostname","match","url","shelly_data","mqttOptions","qos","App","setClient","connectAsync","undefined","console","warn","connect","version","Main","usePlace","setters","outSetters","setShellies","getPlace","setHumidity","groups","newState","Off","setupHandlers","ids","Seperator","rootElement","document","getElementById","Application","StrictMode","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2b3a4f4c.chunk.js","sourcesContent":["import React from 'react';\nimport colors from 'tailwindcss/colors';\n\nconst titleColors = [\n\tcolors.rose,\n\tcolors.indigo,\n\tcolors.teal,\n\tcolors.lime,\n\tcolors.purple,\n\tcolors.cyan,\n\tcolors.red,\n\tcolors.amber,\n];\n\nconst AppTitle: React.FC = () => (\n\t<h1 className=\"text-4xl pt-2\">\n\t\t{'Paletten'.split('').map((c, i) => (\n\t\t\t<span\n\t\t\t\tkey={i}\n\t\t\t\tstyle={{\n\t\t\t\t\tcolor: titleColors[i]['500'],\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{c}\n\t\t\t</span>\n\t\t))}\n\t</h1>\n);\n\nexport default AppTitle;\n","import { AsyncMqttClient } from 'async-mqtt';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nconst DesiredTemperature = ({ client }: { client: AsyncMqttClient }) => {\n\tconst [temperature, setTemperature] = useState<number>(0);\n\tconst onDesiredTemperatureChange = useCallback(\n\t\t(event: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst value = event.currentTarget.valueAsNumber;\n\t\t\tsetTemperature(value);\n\t\t\tclient.publish('temperature/set', value.toString(), {\n\t\t\t\tretain: true,\n\t\t\t});\n\t\t},\n\t\t[client, setTemperature]\n\t);\n\n\tconst [active, setActive] = useState(false);\n\tconst toggleActive = useCallback(\n\t\t(event: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst value = event.currentTarget.checked;\n\t\t\tsetActive(value);\n\t\t\tclient.publish('temperature/auto', value.toString(), {\n\t\t\t\tretain: true,\n\t\t\t});\n\t\t},\n\t\t[client, setActive]\n\t);\n\n\tuseEffect(() => {\n\t\tclient.on('message', (topic, message) => {\n\t\t\tif (topic === 'temperature/set') {\n\t\t\t\tsetTemperature(Number(message.toString()));\n\t\t\t} else if (topic === 'temperature/auto') {\n\t\t\t\tsetActive(message.toString() === 'true');\n\t\t\t}\n\t\t});\n\t\tclient.subscribe('temperature/set');\n\t\tclient.subscribe('temperature/auto');\n\t}, [client, setTemperature]);\n\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<div className=\"space-x-2 h-full\">\n\t\t\t\t<label\n\t\t\t\t\thtmlFor=\"temperature-control\"\n\t\t\t\t\tclassName=\"h-full align-middle text-xl\"\n\t\t\t\t>\n\t\t\t\t\tAutomatisk temperaturkontrol?\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\tid=\"temperature-control\"\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tonChange={toggleActive}\n\t\t\t\t\tchecked={active}\n\t\t\t\t\tclassName=\"w-6 h-6 align-middle\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div hidden={!active} className=\"pt-4\">\n\t\t\t\t<input\n\t\t\t\t\tid=\"temperature-range\"\n\t\t\t\t\tclassName=\"w-11/12 bg-transparent slider-progress\"\n\t\t\t\t\tstyle={\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'--min': 0,\n\t\t\t\t\t\t\t'--max': 25,\n\t\t\t\t\t\t\t'--value': temperature,\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\t\t} as any\n\t\t\t\t\t}\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tmax=\"25\"\n\t\t\t\t\tvalue={temperature}\n\t\t\t\t\tonChange={onDesiredTemperatureChange}\n\t\t\t\t/>\n\t\t\t\t<label htmlFor=\"temperature-range\">\n\t\t\t\t\tØnskede temperature: {temperature} &#176;C\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default DesiredTemperature;\n","import React from 'react';\n\ninterface ButtonProps {\n\tchildren: JSX.Element[] | string;\n\tonClick: () => void;\n\tcolor?: string;\n\tclassName?: string;\n}\n\nexport const Button = ({\n\tcolor,\n\tchildren,\n\tclassName,\n\tonClick,\n}: ButtonProps) => (\n\t<button\n\t\tonClick={onClick}\n\t\tclassName={`text-white p-2 m-2 text-xl rounded ${mapColor(\n\t\t\tcolor ?? 'blue'\n\t\t)} ${className}`}\n\t>\n\t\t{children}\n\t</button>\n);\n\nfunction mapColor(color: string) {\n\tswitch (color) {\n\t\tcase 'blue':\n\t\t\treturn 'bg-blue-900';\n\t\tcase 'red':\n\t\t\treturn 'bg-red-900';\n\t\tcase 'green':\n\t\t\treturn 'bg-green-900';\n\n\t\tdefault:\n\t\t\treturn 'bg-gray-700';\n\t}\n}\n","import React, { useCallback } from 'react';\nimport { Button } from './Button';\nimport { IShelly } from '../models';\n\ninterface MasterButtonsProps {\n\tshellies: IShelly[];\n}\n\nconst MasterButtons = ({ shellies }: MasterButtonsProps) => {\n\tconst allOn = useCallback(() => shellies.forEach((s) => s.setState('on')), [\n\t\tshellies,\n\t]);\n\tconst allOff = useCallback(() => shellies.forEach((s) => s.setState('off')), [\n\t\tshellies,\n\t]);\n\n\treturn (\n\t\t<div className=\"w-full flex flex-row\">\n\t\t\t<Button onClick={allOn} className=\"flex-grow\">\n\t\t\t\tTænd alt\n\t\t\t</Button>\n\t\t\t<Button onClick={allOff} className=\"flex-grow\">\n\t\t\t\tSluk alt\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n\nexport default MasterButtons;\n","import { AsyncMqttClient } from 'async-mqtt';\n\nexport enum State {\n\tOn,\n\tOff,\n}\n\nexport interface IShelly {\n\tid: string;\n\tname: string;\n\tstate?: State;\n\ttoggle: () => void;\n\tsetState: (state: string) => void;\n}\n\nexport class Shelly implements IShelly {\n\tprivate client: AsyncMqttClient;\n\tid: string;\n\tname: string;\n\tstate?: State | undefined;\n\n\tconstructor(id: string, name: string, client: AsyncMqttClient) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.client = client;\n\t}\n\n\ttoggle = () => this.client.publish(this.commandPath(), 'toggle');\n\tsetState = (state: string) => this.client.publish(this.commandPath(), state);\n\tcommandPath = () => `shellies/shelly1-${this.id}/relay/0/command`;\n}\n\nexport interface IPlace {\n\ttemperature?: number;\n\thumidity?: number;\n}\n\nexport interface TemperatureEntry {\n\ttime: Date;\n\ttemp: number;\n\thum: number;\n}\n","import React from 'react';\nimport { IPlace } from '../models';\n\ninterface PlaceStateProps {\n\tstate: IPlace;\n\tname: string;\n}\n\nconst PlaceState = ({ state, name }: PlaceStateProps) => {\n\treturn (\n\t\t<div className=\"w-full max-w-xs\">\n\t\t\t<h2 className=\"text-xl\">{name}</h2>\n\n\t\t\t<div className=\"flex justify-between w-full\">\n\t\t\t\tTemperatur: <span>{state.temperature} &#176;C</span>\n\t\t\t</div>\n\t\t\t<div className=\"flex justify-between w-full\">\n\t\t\t\tFugtighed:\n\t\t\t\t<span>{state.humidity} %</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default PlaceState;\n","import React from 'react';\nimport { IoMdPower } from 'react-icons/io';\nimport { stateToColor } from '../App';\nimport { Button } from './Button';\nimport { IShelly, State } from '../models';\n\nconst ShellyComponent = ({ shelly }: { shelly: IShelly }) => {\n\treturn (\n\t\t<Button\n\t\t\tclassName=\"space-x-4\"\n\t\t\tonClick={shelly.toggle}\n\t\t\tcolor={stateToColor(shelly.state)}\n\t\t>\n\t\t\t<span className=\"inline-flex flex-col h-full justify-center align-middle\">\n\t\t\t\t<IoMdPower size=\"20px\" />\n\t\t\t</span>\n\t\t\t<span>\n\t\t\t\t{shelly.name} - {shelly.state === State.On ? 'Tændt' : 'Slukket'}\n\t\t\t</span>\n\t\t</Button>\n\t);\n};\n\nexport default ShellyComponent;\n","export function groupBy<T>(xs: T[], key) {\n\treturn xs.reduce((rv, x) => {\n\t\tconst v = key instanceof Function ? key(x) : x[key];\n\t\t(rv[v] = rv[v] || []).push(x);\n\t\treturn rv;\n\t}, {});\n}\n\nexport const uniqueHour = (date: Date) =>\n\t`${date.getFullYear()}-${date.getMonth()}-${date.getDate()} ${date.getHours()}`;\n\nexport function average(xs: number[]): number {\n\treturn sum(xs) / xs.length;\n}\n\nexport function sum(xs: number[]): number {\n\treturn xs.reduce((acc, x) => acc + x, 0);\n}\n","import { AxisBottom, AxisLeft } from '@visx/axis';\nimport { Group } from '@visx/group';\nimport { ParentSize } from '@visx/responsive';\nimport { scaleBand, scaleLinear } from '@visx/scale';\nimport { Bar } from '@visx/shape';\nimport { getHours } from 'date-fns';\nimport React from 'react';\nimport colors from 'tailwindcss/colors';\nimport { TemperatureEntry } from '../../models';\n\nconst axisColor = colors.purple['500'];\n\ninterface BarGraphProps {\n\tdata: TemperatureEntry[];\n}\n\nconst BarGraph = ({ data }: BarGraphProps) => {\n\treturn (\n\t\t<ParentSize>\n\t\t\t{({ width }) => {\n\t\t\t\tconst height = 150;\n\t\t\t\tconst margin = { top: 20, bottom: 20, left: 30, right: 0 };\n\n\t\t\t\tconst xMax = width - margin.left - margin.right;\n\t\t\t\tconst yMax = height - margin.top - margin.bottom;\n\n\t\t\t\tconst x = (d) => d.time;\n\t\t\t\tconst y = (d) => d.temp;\n\n\t\t\t\tconst xScale = scaleBand({\n\t\t\t\t\trange: [margin.left, xMax],\n\t\t\t\t\tround: true,\n\t\t\t\t\tdomain: data.map(x),\n\t\t\t\t\tpadding: 0.4,\n\t\t\t\t});\n\t\t\t\tconst yScale = scaleLinear({\n\t\t\t\t\trange: [yMax, 0],\n\t\t\t\t\tround: true,\n\t\t\t\t\tdomain: [Math.min(...data.map(y)) - 2, Math.max(...data.map(y))],\n\t\t\t\t});\n\n\t\t\t\tconst compose = (scale, accessor) => (data) => scale(accessor(data));\n\t\t\t\tconst xPoint = compose(xScale, x);\n\t\t\t\tconst yPoint = compose(yScale, y);\n\n\t\t\t\tconst hourOffset = new Date().getTimezoneOffset() / 60;\n\n\t\t\t\treturn (\n\t\t\t\t\t<svg width={width} height={height}>\n\t\t\t\t\t\t{data.map((d, i) => {\n\t\t\t\t\t\t\tconst barHeight = yMax - yPoint(d);\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Group key={`bar-${i}`}>\n\t\t\t\t\t\t\t\t\t<Bar\n\t\t\t\t\t\t\t\t\t\tx={xPoint(d)}\n\t\t\t\t\t\t\t\t\t\ty={yMax - barHeight}\n\t\t\t\t\t\t\t\t\t\theight={barHeight}\n\t\t\t\t\t\t\t\t\t\twidth={xScale.bandwidth()}\n\t\t\t\t\t\t\t\t\t\tfill={colors.red['700']}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t<AxisBottom\n\t\t\t\t\t\t\ttop={yMax + 10}\n\t\t\t\t\t\t\tscale={xScale}\n\t\t\t\t\t\t\ttickFormat={(d: Date) => `${getHours(d) - hourOffset}`}\n\t\t\t\t\t\t\tstroke={axisColor}\n\t\t\t\t\t\t\ttickStroke={axisColor}\n\t\t\t\t\t\t\ttickLabelProps={() => ({\n\t\t\t\t\t\t\t\tfill: axisColor,\n\t\t\t\t\t\t\t\tfontSize: 11,\n\t\t\t\t\t\t\t\ttextAnchor: 'middle',\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<AxisLeft\n\t\t\t\t\t\t\tscale={yScale}\n\t\t\t\t\t\t\tleft={margin.left + 10}\n\t\t\t\t\t\t\tnumTicks={5}\n\t\t\t\t\t\t\ttickFormat={(t) => `${t} C`}\n\t\t\t\t\t\t\tstroke={axisColor}\n\t\t\t\t\t\t\ttickStroke={axisColor}\n\t\t\t\t\t\t\ttickLabelProps={() => ({\n\t\t\t\t\t\t\t\tfill: axisColor,\n\t\t\t\t\t\t\t\tfontSize: 11,\n\t\t\t\t\t\t\t\ttextAnchor: 'end',\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\t\t\t\t);\n\t\t\t}}\n\t\t</ParentSize>\n\t);\n};\n\nexport default BarGraph;\n","import { AsyncMqttClient } from 'async-mqtt';\nimport { parse } from 'date-fns';\nimport React, { useEffect, useState } from 'react';\nimport { TemperatureEntry } from '../models';\nimport { average, groupBy, uniqueHour } from '../utils/general';\nimport TemperatureChart from './charts/TemperatureChart';\n\ninterface TemperatureHistoryProps {\n\tclient: AsyncMqttClient;\n}\n\nconst TemperatureHistory = ({ client }: TemperatureHistoryProps) => {\n\tconst [inside, setInside] = useState<TemperatureEntry[] | undefined>();\n\tconst [outside, setOutside] = useState<TemperatureEntry[] | undefined>();\n\n\tuseEffect(() => {\n\t\tclient.on('message', (topic, message) => {\n\t\t\tif (topic.startsWith('history')) {\n\t\t\t\tif (topic === 'history/inside') {\n\t\t\t\t\tsetInside(parseData(message));\n\t\t\t\t} else if (topic === 'history/outside') {\n\t\t\t\t\tsetOutside(parseData(message));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tclient.subscribe('history/heater/#');\n\t\tclient.subscribe('history/+');\n\t}, [client]);\n\n\treturn (\n\t\t<>\n\t\t\t<h2>Temperature inside</h2>\n\t\t\t{inside && <TemperatureChart data={inside} />}\n\t\t\t<h2>Temperature outside</h2>\n\t\t\t{outside && <TemperatureChart data={outside} />}\n\t\t</>\n\t);\n};\n\nexport default TemperatureHistory;\n\nfunction parseData(message: Buffer): TemperatureEntry[] {\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tconst values = (JSON.parse(message.toString()) as any[]).map((x) => ({\n\t\t...x,\n\t\ttime: parse(x.time, 'yyyy-MM-dd HH:mm:ss', 0),\n\t}));\n\n\tconst group = groupBy(values, (x) => uniqueHour(x.time));\n\n\treturn Object.keys(group)\n\t\t.map((x) => ({\n\t\t\ttime: parse(x, 'yyyy-MM-dd HH', 0),\n\t\t\ttemp: average(group[x].map((v) => v.temp)),\n\t\t\thum: average(group[x].map((v) => v.hum)),\n\t\t}))\n\t\t.reverse();\n}\n","import React from 'react';\nimport { WiRain, WiSnow } from 'react-icons/wi';\nimport { WeatherFalldownVolume } from './weatherApi';\n\ninterface FalldownVolumeProps extends WeatherFalldownVolume {\n\ttype: 'Rain' | 'Snow';\n}\n\nconst FalldownVolume = (props: FalldownVolumeProps) => (\n\t<div className=\"w-full flex justify-between\">\n\t\t<Icon type={props.type} />\n\t\t<div className=\"flex flex-col items-end\">\n\t\t\t<span className=\"align-middle\">Last hour: {props['1h']} mm</span>\n\t\t\t<span className=\"align-middle\">Last 3 hours: {props['3h']} mm</span>\n\t\t</div>\n\t</div>\n);\n\nexport default FalldownVolume;\n\nconst Icon = ({ type }: { type: 'Rain' | 'Snow' }) => (\n\t<>\n\t\t{type === 'Rain' ? (\n\t\t\t<WiRain size={32} className=\"inline self-center\" />\n\t\t) : (\n\t\t\t<WiSnow size={32} className=\"inline self-center\" />\n\t\t)}\n\t</>\n);\n","import React from 'react';\nimport { WeatherStatus } from './weatherApi';\n\ninterface OpenWeatherMapIconProps {\n\tweather: WeatherStatus;\n}\n\nconst OpenWeatherMapIcon = ({ weather }: OpenWeatherMapIconProps) => (\n\t<img\n\t\tsrc={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}\n\t\ttitle={weather.main}\n\t\talt={weather.description}\n\t\tclassName=\"h-24\"\n\t\tloading=\"lazy\"\n\t/>\n);\n\nexport default OpenWeatherMapIcon;\n","import { format } from 'date-fns';\nimport React from 'react';\nimport { WiSunrise, WiSunset } from 'react-icons/wi';\n\ninterface SunriceAndSunsetProps {\n\tsunrise: Date;\n\tsunset: Date;\n}\n\nconst SunriseAndSunset = ({ sunrise, sunset }: SunriceAndSunsetProps) => (\n\t<div className=\"w-full flex justify-evenly\">\n\t\t<span>\n\t\t\t<WiSunrise size={32} className=\"inline\" />\n\t\t\t{format(sunrise, 'H:mm')}\n\t\t</span>\n\t\t<span>\n\t\t\t<WiSunset size={32} className=\"inline\" />\n\t\t\t{format(sunset, 'H:mm')}\n\t\t</span>\n\t</div>\n);\n\nexport default SunriseAndSunset;\n","const apiKey = '0694b207da3718174af5607fbd520b2d';\nconst baseUrl = 'https://api.openweathermap.org/data/2.5';\n\nexport async function getCurrentWeather() {\n\tconst response = await fetch(\n\t\t`${baseUrl}/weather?q=rørvig,DK&appid=${apiKey}&units=metric`\n\t);\n\tconst data = await response.json();\n\n\treturn {\n\t\t...data,\n\t\tdt: new Date(data.dt),\n\t\tsys: {\n\t\t\t...data.sys,\n\t\t\tsunrise: new Date(data.sys.sunrise * 1000),\n\t\t\tsunset: new Date(data.sys.sunset * 1000),\n\t\t},\n\t};\n}\n\nexport interface WeatherStatus {\n\tid: number;\n\tmain: string;\n\tdescription: string;\n\ticon: string;\n}\n\nexport interface WeatherMain {\n\ttemp: number;\n\tfeels_like: number;\n\ttemp_min: number;\n\ttemp_max: number;\n\tpressure: number;\n\thumidity: number;\n\tsea_level: number;\n\tgrnd_level: number;\n}\n\nexport interface WeatherWind {\n\tspeed: number;\n\tdeg: number;\n\tgust: number;\n}\n\nexport interface WeatherFalldownVolume {\n\t'1h': number;\n\t'3h': number;\n}\n\nexport interface CurrentWeatherResponse {\n\tcoord: { lon: number; lat: number };\n\tweather: WeatherStatus[];\n\tbase: string;\n\tmain: WeatherMain;\n\tvisibility: number;\n\twind: WeatherWind;\n\tclouds: {\n\t\tall: number;\n\t};\n\tdt: Date;\n\tsys: {\n\t\ttype: number;\n\t\tid: number;\n\t\tcountry: string;\n\t\tsunrise: Date;\n\t\tsunset: Date;\n\t};\n\ttimezone: number;\n\tid: number;\n\tname: string;\n\tcod: number;\n\train?: WeatherFalldownVolume;\n\tsnow?: WeatherFalldownVolume;\n}\n","import React from 'react';\nimport { WiBarometer, WiFog, WiHumidity } from 'react-icons/wi';\nimport { WeatherMain } from './weatherApi';\n\ninterface WeatherDetailsProps extends WeatherMain {\n\tvisibility: number;\n}\n\nconst WeatherDetails = ({\n\thumidity,\n\tpressure,\n\tvisibility,\n}: WeatherDetailsProps) => (\n\t<details>\n\t\t<summary>More</summary>\n\t\t<div className=\"grid grid-cols-2 gap-y-2 gap-x-4\">\n\t\t\t<span>\n\t\t\t\t<WiHumidity size={24} className=\"inline\" />\n\t\t\t\t<span className=\"align-middle\">Humidity</span>\n\t\t\t</span>\n\t\t\t<span>{humidity} %</span>\n\n\t\t\t<span>\n\t\t\t\t<WiBarometer size={24} className=\"inline\" />\n\t\t\t\t<span className=\"align-middle\">Pressure</span>\n\t\t\t</span>\n\t\t\t<span>{pressure} hPa</span>\n\n\t\t\t<span>\n\t\t\t\t<WiFog size={24} className=\"inline\" />\n\t\t\t\t<span className=\"align-middle\">Visibility</span>\n\t\t\t</span>\n\t\t\t<span>{visibility / 1000} km</span>\n\t\t</div>\n\t</details>\n);\n\nexport default WeatherDetails;\n","import React from 'react';\nimport {\n\tWiDirectionUp,\n\tWiDirectionUpRight,\n\tWiDirectionRight,\n\tWiDirectionDownRight,\n\tWiDirectionDown,\n\tWiDirectionDownLeft,\n\tWiDirectionLeft,\n\tWiDirectionUpLeft,\n\tWiWindy,\n} from 'react-icons/wi';\n\ninterface WindProps {\n\tspeed: number;\n\tdeg: number;\n\tgust: number;\n}\n\nconst Wind = ({ speed, deg }: WindProps) => (\n\t<div className=\"flex space-x-2 items-center\">\n\t\t<WiWindy size={32} className=\"inline\" />\n\t\t<span className=\"align-middle\">Wind {speed} m/s</span>\n\t\t<WindDirectionIcon degree={deg} size={24} className=\"inline\" />\n\t</div>\n);\n\nexport default Wind;\n\ninterface WindDirectionIconProps {\n\tdegree: number;\n\tsize?: number;\n\tclassName: string;\n}\n\nconst WindDirectionIcon = (props: WindDirectionIconProps) => {\n\tconst direction = Math.round(props.degree / 45) % 8;\n\tswitch (direction) {\n\t\tcase 0:\n\t\t\treturn <WiDirectionUp {...props} />;\n\t\tcase 1:\n\t\t\treturn <WiDirectionUpRight {...props} />;\n\t\tcase 2:\n\t\t\treturn <WiDirectionRight {...props} />;\n\t\tcase 3:\n\t\t\treturn <WiDirectionDownRight {...props} />;\n\t\tcase 4:\n\t\t\treturn <WiDirectionDown {...props} />;\n\t\tcase 5:\n\t\t\treturn <WiDirectionDownLeft {...props} />;\n\t\tcase 6:\n\t\t\treturn <WiDirectionLeft {...props} />;\n\t\tcase 7:\n\t\t\treturn <WiDirectionUpLeft {...props} />;\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n};\n","import React, { memo, useCallback, useEffect, useState } from 'react';\nimport { IoIosRefresh } from 'react-icons/io';\nimport FalldownVolume from './FalldownVolume';\nimport OpenWeatherMapIcon from './OpenWeatherMapIcon';\nimport SunriseAndSunset from './SunriseAndSunset';\nimport {\n\tCurrentWeatherResponse,\n\tgetCurrentWeather,\n\tWeatherMain,\n} from './weatherApi';\nimport WeatherDetails from './WeatherDetails';\nimport Wind from './Wind';\n\nconst CurrentWeather = memo(() => {\n\tconst [weather, setWeather] = useState<CurrentWeatherResponse | undefined>();\n\n\tconst refresh = useCallback(() => getCurrentWeather().then(setWeather), [\n\t\tsetWeather,\n\t]);\n\n\tuseEffect(() => {\n\t\trefresh();\n\t}, [refresh]);\n\n\tif (!weather) return null;\n\n\treturn (\n\t\t<>\n\t\t\t<Title refresh={refresh} />\n\t\t\t<Temperatures {...weather.main} />\n\t\t\t<OpenWeatherMapIcon weather={weather.weather[0]} />\n\t\t\t<SunriseAndSunset {...weather.sys} />\n\t\t\t<Wind {...weather.wind} />\n\t\t\t{weather.rain && <FalldownVolume {...weather.rain} type={'Rain'} />}\n\t\t\t{weather.snow && <FalldownVolume {...weather.snow} type={'Snow'} />}\n\t\t\t<WeatherDetails {...weather.main} visibility={weather.visibility} />\n\t\t</>\n\t);\n});\nCurrentWeather.displayName = 'CurrentWeather';\n\nexport default CurrentWeather;\n\nconst Title = ({ refresh }: { refresh: () => void }) => (\n\t<>\n\t\t<h2 className=\"w-full relative text-xl text-yellow-500 pb-2\">\n\t\t\tCurrent weather in Rørvig\n\t\t\t<button className=\"inline absolute top-1 right-0\" onClick={refresh}>\n\t\t\t\t<IoIosRefresh size={24} />\n\t\t\t</button>\n\t\t</h2>\n\t</>\n);\n\nconst Temperatures = ({ temp, feels_like }: WeatherMain) => (\n\t<div className=\"w-full flex justify-evenly\">\n\t\t<span>Now: {Math.round(temp)} &#176;C</span>\n\t\t<span>Feels like: {Math.round(feels_like)} &#176;C</span>\n\t</div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nexport { version } from '../package.json';\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import {\n\tAsyncMqttClient,\n\tconnectAsync,\n\tIClientSubscribeOptions,\n} from 'async-mqtt';\nimport React, { useEffect, useState } from 'react';\nimport AppTitle from './components/AppTitle';\nimport DesiredTemperature from './components/DesiredTemperature';\nimport MasterButtons from './components/MasterButtons';\nimport PlaceState from './components/PlaceState';\nimport ShellyComponent from './components/ShellyComponent';\nimport TemperatureHistory from './components/TemperatureHistory';\nimport CurrentWeather from './features/Weather/CurrentWeather';\nimport { IPlace, IShelly, Shelly, State } from './models';\nimport { version } from './serviceWorker';\n\nconst url = 'wss://paletten.oliverflecke.me:9001';\n\nconst shelly_data = [\n\t{ id: 'C4402D', name: 'Spisebord' },\n\t{ id: 'C431FB', name: 'Sofa' },\n\t{ id: '10DB9C', name: 'Soveværelse' },\n];\n\nconst mqttOptions: IClientSubscribeOptions = { qos: 1 };\n\nfunction App() {\n\tconst [client, setClient] = useState<AsyncMqttClient | null | undefined>();\n\n\tuseEffect(() => {\n\t\tasync function connect() {\n\t\t\ttry {\n\t\t\t\tconst client = await connectAsync(url, undefined, false);\n\t\t\t\tsetClient(client);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.warn(err);\n\t\t\t\tsetClient(null);\n\t\t\t}\n\t\t}\n\t\tconnect();\n\t}, []);\n\n\tif (client === undefined) {\n\t\treturn (\n\t\t\t<h2 className=\"text-black dark:text-white w-full text-center text-xl\">\n\t\t\t\tConnecting...\n\t\t\t</h2>\n\t\t);\n\t}\n\tif (client === null) {\n\t\treturn (\n\t\t\t<h2 className=\"text-black dark:text-white w-full text-center text-xl\">\n\t\t\t\tFailed to connect. Please contact website developer\n\t\t\t</h2>\n\t\t);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Main client={client} />\n\t\t\t<span className=\"text-sm\">Version: {version}</span>\n\t\t</>\n\t);\n}\n\nexport default App;\n\nconst Main = ({ client }: { client: AsyncMqttClient }) => {\n\tconst [inside, setters] = usePlace();\n\tconst [outside, outSetters] = usePlace();\n\n\tconst [shellies, setShellies] = useState<IShelly[]>(() =>\n\t\tshelly_data.map((s) => new Shelly(s.id, s.name, client))\n\t);\n\n\tuseEffect(() => {\n\t\tclient.on('message', (topic, message) => {\n\t\t\t// console.debug(`Received: ${topic} - ${message}`);\n\t\t\tif (topic.startsWith('temperature/')) {\n\t\t\t\tswitch (getPlace(topic)) {\n\t\t\t\t\tcase 'inside':\n\t\t\t\t\t\tsetters?.setTemperature(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'outside':\n\t\t\t\t\t\toutSetters?.setTemperature(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (topic.startsWith('humidity/')) {\n\t\t\t\tswitch (getPlace(topic)) {\n\t\t\t\t\tcase 'inside':\n\t\t\t\t\t\tsetters.setHumidity(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'outside':\n\t\t\t\t\t\toutSetters.setHumidity(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic.startsWith('shellies')) {\n\t\t\t\tconst match = topic.match(/-(?<id>\\w*)/);\n\t\t\t\tif (match?.groups) {\n\t\t\t\t\tconst newState = message.toString() === 'on' ? State.On : State.Off;\n\t\t\t\t\tconst id = match?.groups['id'];\n\t\t\t\t\tsetShellies((xs) =>\n\t\t\t\t\t\txs.map((s) => ({\n\t\t\t\t\t\t\t...s,\n\t\t\t\t\t\t\tstate: s.id === id ? newState : s.state,\n\t\t\t\t\t\t}))\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tasync function setupHandlers(client) {\n\t\t\tsubscribe(\n\t\t\t\tclient,\n\t\t\t\tshellies.map((x) => x.id)\n\t\t\t);\n\t\t}\n\n\t\tsetupHandlers(client);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [client]);\n\n\treturn (\n\t\t<>\n\t\t\t<AppTitle />\n\t\t\t<section className=\"flex justify-between space-x-6 pb-4 max-w-lg w-full\">\n\t\t\t\t<PlaceState name=\"Inde\" state={inside} />\n\t\t\t\t<PlaceState name=\"Ude\" state={outside} />\n\t\t\t</section>\n\t\t\t<section className=\"w-full flex flex-col justify-center align-middle\">\n\t\t\t\t{shellies.map((shelly) => (\n\t\t\t\t\t<ShellyComponent key={shelly.id} shelly={shelly} />\n\t\t\t\t))}\n\t\t\t</section>\n\n\t\t\t<Seperator />\n\t\t\t<MasterButtons shellies={shellies} />\n\n\t\t\t<Seperator />\n\t\t\t<DesiredTemperature client={client} />\n\n\t\t\t<Seperator />\n\t\t\t<CurrentWeather />\n\n\t\t\t<Seperator />\n\t\t\t<TemperatureHistory client={client} />\n\t\t</>\n\t);\n};\n\nfunction subscribe(client: AsyncMqttClient, ids: string[]) {\n\tids.forEach(\n\t\tasync (id) =>\n\t\t\tawait client.subscribe(`shellies/shelly1-${id}/relay/0`, mqttOptions)\n\t);\n\t['inside', 'outside'].forEach(async (x) => {\n\t\tawait client.subscribe(`temperature/${x}`, mqttOptions);\n\t\tawait client.subscribe(`humidity/${x}`, mqttOptions);\n\t});\n}\n\nfunction getPlace(topic: string): string | undefined {\n\tconst match = topic.match(/\\/(?<place>\\w+)$/);\n\treturn match?.groups ? match?.groups['place'] : undefined;\n}\n\nexport function stateToColor(state?: State): string {\n\tswitch (state) {\n\t\tcase State.Off:\n\t\t\treturn 'red';\n\t\tcase State.On:\n\t\t\treturn 'green';\n\n\t\tdefault:\n\t\t\treturn 'grey';\n\t}\n}\n\nfunction usePlace(): [\n\tIPlace,\n\t{\n\t\tsetTemperature: React.Dispatch<React.SetStateAction<number | undefined>>;\n\t\tsetHumidity: React.Dispatch<React.SetStateAction<number | undefined>>;\n\t}\n] {\n\tconst [temperature, setTemperature] = useState<number | undefined>();\n\tconst [humidity, setHumidity] = useState<number | undefined>();\n\n\treturn [\n\t\t{ temperature, humidity },\n\t\t{ setTemperature, setHumidity },\n\t];\n}\n\nconst Seperator = () => <hr className=\"w-full my-4\" />;\n","import React from 'react';\nimport { render, hydrate } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nconst Application = (\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>\n);\n\nif (rootElement?.hasChildNodes()) {\n\thydrate(Application, rootElement);\n} else {\n\trender(Application, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}