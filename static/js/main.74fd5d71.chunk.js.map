{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["shellies","id","name","client","mqtt","connect","toggleShellyState","shelly","publish","on","console","log","forEach","subscribe","err","App","useState","temp","setTemp","humidity","setHumidity","useEffect","topic","message","toString","Number","toggleAll","useCallback","x","className","map","key","onClick","Shelly","toggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"6QAaMA,G,OAAsB,CAC3B,CAAEC,GAAI,SAAUC,KAAM,SACtB,CAAED,GAAI,SAAUC,KAAM,QACtB,CAAED,GAAI,SAAUC,KAAM,aAGjBC,EAASC,IAAKC,QAPR,qDAkBZ,SAASC,EAAkBC,GAC1BJ,EAAOK,QAAP,2BAAmCD,EAAON,GAA1C,oBAAgE,UAXjEE,EAAOM,GAAG,WAAW,WACpBC,QAAQC,IAAI,aAEZX,EAASY,SAAQ,SAACL,GACjBJ,EAAOU,UAAP,2BAAqCN,EAAON,GAA5C,aAA0D,SAACa,UAE5DX,EAAOU,UAAU,eAAe,SAACC,OACjCX,EAAOU,UAAU,YAAY,SAACC,UAiDhBC,MA1Cf,WAAgB,IAAD,EACUC,qBADV,mBACPC,EADO,KACDC,EADC,OAEkBF,qBAFlB,mBAEPG,EAFO,KAEGC,EAFH,KAIdC,qBAAU,WACTlB,EAAOM,GAAG,WAAW,SAACa,EAAOC,GAG5B,OAAQD,GACP,IAAK,cACJZ,QAAQC,IAAIY,EAAQC,YACpBN,EAAQO,OAAOF,IACf,MACD,IAAK,WACJb,QAAQC,IAAIY,EAAQC,YACpBJ,EAAYK,OAAOF,UAMpB,IAEH,IAAMG,EAAYC,uBAAY,WAC7B3B,EAASY,SAAQ,SAACgB,GAAD,OAAOtB,EAAkBsB,QACxC,IAEH,OACC,yBAAKC,UAAU,OACd,yCACA,4DAA2BZ,QAA3B,IAA2BA,IAAQ,UAAnC,UACA,kDAAwBE,GACxB,6BACEnB,EAAS8B,KAAI,SAACvB,GAAD,OACb,kBAAC,EAAD,CAAQwB,IAAKxB,EAAON,GAAIM,OAAQA,QAGlC,4BAAQyB,QAASN,GAAjB,gBAOGO,EAAS,SAAC,GAAqC,IAAnC1B,EAAkC,EAAlCA,OACX2B,EAASP,uBAAY,WAC1BrB,EAAkBC,KAChB,CAACA,IAEJ,OAAO,4BAAQyB,QAASE,GAAS3B,EAAOL,OCvErBiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAM7B,a","file":"static/js/main.74fd5d71.chunk.js","sourcesContent":["import mqtt from 'mqtt';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport './App.css';\n\ninterface IShelly {\n\tid: string;\n\tname: string;\n}\n\n// const url = 'mqtt://test.mosquitto.org:8080';\n// const url = 'ws://localhost:9001'\n\nconst url = 'ws://palletten.northeurope.azurecontainer.io:9001';\nconst shellies: IShelly[] = [\n\t{ id: 'C4402D', name: 'Table' },\n\t{ id: 'C431FB', name: 'Sofa' },\n\t{ id: '10DB9C', name: 'Bedroom' },\n];\n\nconst client = mqtt.connect(url);\nclient.on('connect', () => {\n\tconsole.log('connected');\n\n\tshellies.forEach((shelly) => {\n\t\tclient.subscribe(`shellies/shelly1-${shelly.id}/relay/0`, (err) => {});\n\t});\n\tclient.subscribe('temperature', (err) => {});\n\tclient.subscribe('humidity', (err) => {});\n});\n\nfunction toggleShellyState(shelly: IShelly) {\n\tclient.publish(`shellies/shelly1-${shelly.id}/relay/0/command`, 'toggle');\n}\n\nfunction App() {\n\tconst [temp, setTemp] = useState<number | undefined>();\n\tconst [humidity, setHumidity] = useState<number | undefined>();\n\n\tuseEffect(() => {\n\t\tclient.on('message', (topic, message) => {\n\t\t\tif (topic === 'temperature') {\n\t\t\t}\n\t\t\tswitch (topic) {\n\t\t\t\tcase 'temperature':\n\t\t\t\t\tconsole.log(message.toString());\n\t\t\t\t\tsetTemp(Number(message));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'humidity':\n\t\t\t\t\tconsole.log(message.toString());\n\t\t\t\t\tsetHumidity(Number(message));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}, []);\n\n\tconst toggleAll = useCallback(() => {\n\t\tshellies.forEach((x) => toggleShellyState(x));\n\t}, []);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1>Palletten</h1>\n\t\t\t<div>Current temperature: {temp ?? 'unknown'} &#176;C</div>\n\t\t\t<div>Current humidity: {humidity}</div>\n\t\t\t<div>\n\t\t\t\t{shellies.map((shelly) => (\n\t\t\t\t\t<Shelly key={shelly.id} shelly={shelly} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<button onClick={toggleAll}>Toggle all</button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\nconst Shelly = ({ shelly }: { shelly: IShelly }) => {\n\tconst toggle = useCallback(() => {\n\t\ttoggleShellyState(shelly);\n\t}, [shelly]);\n\n\treturn <button onClick={toggle}>{shelly.name}</button>;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}