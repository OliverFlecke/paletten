{"version":3,"sources":["Button.tsx","DesiredTemperature.tsx","models.ts","PlaceState.tsx","ShellyComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","color","children","className","onClick","mapColor","State","DesiredTemperature","client","useState","temperature","setTemperature","onDesiredTemperatureChange","useCallback","event","value","currentTarget","valueAsNumber","publish","toString","retain","active","setActive","toggleActive","checked","useEffect","on","topic","message","Number","subscribe","htmlFor","id","type","onChange","hidden","style","min","max","Shelly","name","state","toggle","commandPath","setState","this","PlaceState","humidity","ShellyComponent","shelly","stateToColor","size","On","url","shelly_data","titleColors","colors","rose","indigo","teal","lime","purple","cyan","red","amber","mqttOptions","qos","App","setClient","a","connectAsync","undefined","console","warn","connect","Main","usePlace","inside","setters","outside","outSetters","map","s","shellies","setShellies","x","startsWith","getPlace","setHumidity","match","groups","newState","Off","xs","setupHandlers","allOn","forEach","allOff","split","c","i","ids","Boolean","window","location","hostname","rootElement","document","getElementById","Application","StrictMode","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.81e800d2.chunk.js","sourcesContent":["import React from 'react';\n\ninterface ButtonProps {\n\tchildren: JSX.Element[] | string;\n\tonClick: () => void;\n\tcolor?: string;\n\tclassName?: string;\n}\n\nexport const Button = ({\n\tcolor,\n\tchildren,\n\tclassName,\n\tonClick,\n}: ButtonProps) => (\n\t<button\n\t\tonClick={onClick}\n\t\tclassName={`text-white p-2 m-2 text-xl rounded ${mapColor(\n\t\t\tcolor ?? 'blue'\n\t\t)} ${className}`}\n\t>\n\t\t{children}\n\t</button>\n);\n\nfunction mapColor(color: string) {\n\tswitch (color) {\n\t\tcase 'blue':\n\t\t\treturn 'bg-blue-900';\n\t\tcase 'red':\n\t\t\treturn 'bg-red-900';\n\t\tcase 'green':\n\t\t\treturn 'bg-green-900';\n\n\t\tdefault:\n\t\t\treturn 'bg-gray-700';\n\t}\n}\n","import { AsyncMqttClient } from 'async-mqtt';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nexport const DesiredTemperature = ({ client }: { client: AsyncMqttClient }) => {\n\tconst [temperature, setTemperature] = useState<number>(0);\n\tconst onDesiredTemperatureChange = useCallback(\n\t\t(event: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst value = event.currentTarget.valueAsNumber;\n\t\t\tsetTemperature(value);\n\t\t\tclient.publish('temperature/set', value.toString(), {\n\t\t\t\tretain: true,\n\t\t\t});\n\t\t},\n\t\t[client, setTemperature]\n\t);\n\n\tconst [active, setActive] = useState(false);\n\tconst toggleActive = useCallback(\n\t\t(event: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\tconst value = event.currentTarget.checked;\n\t\t\tsetActive(value);\n\t\t\tclient.publish('temperature/auto', value.toString(), {\n\t\t\t\tretain: true,\n\t\t\t});\n\t\t},\n\t\t[client, setActive]\n\t);\n\n\tuseEffect(() => {\n\t\tclient.on('message', (topic, message) => {\n\t\t\tif (topic === 'temperature/set') {\n\t\t\t\tsetTemperature(Number(message.toString()));\n\t\t\t} else if (topic === 'temperature/auto') {\n\t\t\t\tsetActive(message.toString() === 'true');\n\t\t\t}\n\t\t});\n\t\tclient.subscribe('temperature/set');\n\t\tclient.subscribe('temperature/auto');\n\t}, [client, setTemperature]);\n\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<div className=\"space-x-2 h-full\">\n\t\t\t\t<label\n\t\t\t\t\thtmlFor=\"temperature-control\"\n\t\t\t\t\tclassName=\"h-full align-middle text-xl\"\n\t\t\t\t>\n\t\t\t\t\tAutomatisk temperaturkontrol?\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\tid=\"temperature-control\"\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tonChange={toggleActive}\n\t\t\t\t\tchecked={active}\n\t\t\t\t\tclassName=\"w-6 h-6 align-middle\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div hidden={!active} className=\"pt-4\">\n\t\t\t\t<input\n\t\t\t\t\tid=\"temperature-range\"\n\t\t\t\t\tclassName=\"w-11/12 bg-transparent slider-progress\"\n\t\t\t\t\tstyle={\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'--min': 0,\n\t\t\t\t\t\t\t'--max': 25,\n\t\t\t\t\t\t\t'--value': temperature,\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\t\t} as any\n\t\t\t\t\t}\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tmax=\"25\"\n\t\t\t\t\tvalue={temperature}\n\t\t\t\t\tonChange={onDesiredTemperatureChange}\n\t\t\t\t/>\n\t\t\t\t<label htmlFor=\"temperature-range\">\n\t\t\t\t\tØnskede temperature: {temperature} &#176;C\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import { AsyncMqttClient } from 'async-mqtt';\n\nexport enum State {\n\tOn,\n\tOff,\n}\n\nexport interface IShelly {\n\tid: string;\n\tname: string;\n\tstate?: State;\n\ttoggle: () => void;\n\tsetState: (state: string) => void;\n}\n\nexport class Shelly implements IShelly {\n\tprivate client: AsyncMqttClient;\n\tid: string;\n\tname: string;\n\tstate?: State | undefined;\n\n\tconstructor(id: string, name: string, client: AsyncMqttClient) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.client = client;\n\t}\n\n\ttoggle = () => this.client.publish(this.commandPath(), 'toggle');\n\tsetState = (state: string) => this.client.publish(this.commandPath(), state);\n\tcommandPath = () => `shellies/shelly1-${this.id}/relay/0/command`;\n}\n\nexport interface IPlace {\n\ttemperature?: number;\n\thumidity?: number;\n}\n","import React from 'react';\nimport { IPlace } from './models';\n\ninterface PlaceStateProps {\n\tstate: IPlace;\n\tname: string;\n}\n\nexport const PlaceState = ({ state, name }: PlaceStateProps) => {\n\treturn (\n\t\t<div className=\"w-full max-w-xs\">\n\t\t\t<h2 className=\"text-xl\">{name}</h2>\n\n\t\t\t<div className=\"flex justify-between w-full\">\n\t\t\t\tTemperatur: <span>{state.temperature} &#176;C</span>\n\t\t\t</div>\n\t\t\t<div className=\"flex justify-between w-full\">\n\t\t\t\tFugtighed:\n\t\t\t\t<span>{state.humidity} %</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport { IoMdPower } from 'react-icons/io';\nimport { stateToColor } from './App';\nimport { Button } from './Button';\nimport { IShelly, State } from './models';\n\nexport const ShellyComponent = ({ shelly }: { shelly: IShelly }) => {\n\treturn (\n\t\t<Button\n\t\t\tclassName=\"space-x-4\"\n\t\t\tonClick={shelly.toggle}\n\t\t\tcolor={stateToColor(shelly.state)}\n\t\t>\n\t\t\t<span className=\"inline-flex flex-col h-full justify-center align-middle\">\n\t\t\t\t<IoMdPower size=\"20px\" />\n\t\t\t</span>\n\t\t\t<span>\n\t\t\t\t{shelly.name} - {shelly.state === State.On ? 'Tændt' : 'Slukket'}\n\t\t\t</span>\n\t\t</Button>\n\t);\n};\n","import {\n\tAsyncMqttClient,\n\tconnectAsync,\n\tIClientSubscribeOptions,\n} from 'async-mqtt';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Button } from './Button';\nimport { DesiredTemperature } from './DesiredTemperature';\nimport { IPlace, IShelly, Shelly, State } from './models';\nimport { PlaceState } from './PlaceState';\nimport { ShellyComponent } from './ShellyComponent';\nimport colors from 'tailwindcss/colors';\n\nconst url = 'wss://paletten.oliverflecke.me:9001';\n\nconst shelly_data = [\n\t{ id: 'C4402D', name: 'Spisebord' },\n\t{ id: 'C431FB', name: 'Sofa' },\n\t{ id: '10DB9C', name: 'Soveværelse' },\n];\n\nconst titleColors = [\n\tcolors.rose,\n\tcolors.indigo,\n\tcolors.teal,\n\tcolors.lime,\n\tcolors.purple,\n\tcolors.cyan,\n\tcolors.red,\n\tcolors.amber,\n];\n\nconst mqttOptions: IClientSubscribeOptions = { qos: 1 };\n\nfunction App() {\n\tconst [client, setClient] = useState<AsyncMqttClient | null | undefined>();\n\n\tuseEffect(() => {\n\t\tasync function connect() {\n\t\t\ttry {\n\t\t\t\tconst client = await connectAsync(url, undefined, false);\n\t\t\t\tsetClient(client);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.warn(err);\n\t\t\t\tsetClient(null);\n\t\t\t}\n\t\t}\n\t\tconnect();\n\t}, []);\n\n\tif (client === undefined) {\n\t\treturn (\n\t\t\t<h2 className=\"text-black dark:text-white w-full text-center text-xl\">\n\t\t\t\tConnecting...\n\t\t\t</h2>\n\t\t);\n\t}\n\tif (client === null) {\n\t\treturn (\n\t\t\t<h2 className=\"text-black dark:text-white w-full text-center text-xl\">\n\t\t\t\tFailed to connect. Please contact website developer\n\t\t\t</h2>\n\t\t);\n\t}\n\n\treturn <Main client={client} />;\n}\n\nexport default App;\n\nconst Main = ({ client }: { client: AsyncMqttClient }) => {\n\tconst [inside, setters] = usePlace();\n\tconst [outside, outSetters] = usePlace();\n\n\tconst [shellies, setShellies] = useState<IShelly[]>(() =>\n\t\tshelly_data.map((s) => new Shelly(s.id, s.name, client))\n\t);\n\n\tuseEffect(() => {\n\t\tclient.on('message', (topic, message) => {\n\t\t\t// console.debug(`Received: ${topic} - ${message}`);\n\t\t\tif (topic.startsWith('temperature/')) {\n\t\t\t\tswitch (getPlace(topic)) {\n\t\t\t\t\tcase 'inside':\n\t\t\t\t\t\tsetters?.setTemperature(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'outside':\n\t\t\t\t\t\toutSetters?.setTemperature(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (topic.startsWith('humidity/')) {\n\t\t\t\tswitch (getPlace(topic)) {\n\t\t\t\t\tcase 'inside':\n\t\t\t\t\t\tsetters.setHumidity(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'outside':\n\t\t\t\t\t\toutSetters.setHumidity(Number(message));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic.startsWith('shellies')) {\n\t\t\t\tconst match = topic.match(/-(?<id>\\w*)/);\n\t\t\t\tif (match?.groups) {\n\t\t\t\t\tconst newState = message.toString() === 'on' ? State.On : State.Off;\n\t\t\t\t\tconst id = match?.groups['id'];\n\t\t\t\t\tsetShellies((xs) =>\n\t\t\t\t\t\txs.map((s) => ({\n\t\t\t\t\t\t\t...s,\n\t\t\t\t\t\t\tstate: s.id === id ? newState : s.state,\n\t\t\t\t\t\t}))\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tasync function setupHandlers(client) {\n\t\t\tsubscribe(\n\t\t\t\tclient,\n\t\t\t\tshellies.map((x) => x.id)\n\t\t\t);\n\t\t}\n\n\t\tsetupHandlers(client);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [client]);\n\n\tconst allOn = useCallback(() => shellies.forEach((s) => s.setState('on')), [\n\t\tshellies,\n\t]);\n\tconst allOff = useCallback(() => shellies.forEach((s) => s.setState('off')), [\n\t\tshellies,\n\t]);\n\n\treturn (\n\t\t<div className=\"flex flex-col justify-center items-center text-center mx-4 text-gray-700 dark:text-gray-300\">\n\t\t\t<h1 className=\"text-4xl pt-2\">\n\t\t\t\t{'Paletten'.split('').map((c, i) => (\n\t\t\t\t\t<span\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tcolor: titleColors[i]['500'],\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{c}\n\t\t\t\t\t</span>\n\t\t\t\t))}\n\t\t\t</h1>\n\t\t\t<div className=\"flex justify-between space-x-6 pb-4 max-w-lg w-full\">\n\t\t\t\t<PlaceState name=\"Inde\" state={inside} />\n\t\t\t\t<PlaceState name=\"Ude\" state={outside} />\n\t\t\t</div>\n\t\t\t<div className=\"w-full flex flex-col justify-center align-middle\">\n\t\t\t\t{shellies.map((shelly) => (\n\t\t\t\t\t<ShellyComponent key={shelly.id} shelly={shelly} />\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<hr className=\"w-full my-4\" />\n\t\t\t<div className=\"w-full flex flex-row\">\n\t\t\t\t<Button onClick={allOn} className=\"flex-grow\">\n\t\t\t\t\tTænd alt\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={allOff} className=\"flex-grow\">\n\t\t\t\t\tSluk alt\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t<hr className=\"w-full my-4\" />\n\t\t\t<DesiredTemperature client={client} />\n\t\t</div>\n\t);\n};\n\nfunction subscribe(client: AsyncMqttClient, ids: string[]) {\n\tids.forEach(\n\t\tasync (id) =>\n\t\t\tawait client.subscribe(`shellies/shelly1-${id}/relay/0`, mqttOptions)\n\t);\n\t['inside', 'outside'].forEach(async (x) => {\n\t\tawait client.subscribe(`temperature/${x}`, mqttOptions);\n\t\tawait client.subscribe(`humidity/${x}`, mqttOptions);\n\t});\n}\n\nfunction getPlace(topic: string): string | undefined {\n\tconst match = topic.match(/\\/(?<place>\\w+)$/);\n\treturn match?.groups ? match?.groups['place'] : undefined;\n}\n\nexport function stateToColor(state?: State): string {\n\tswitch (state) {\n\t\tcase State.Off:\n\t\t\treturn 'red';\n\t\tcase State.On:\n\t\t\treturn 'green';\n\n\t\tdefault:\n\t\t\treturn 'grey';\n\t}\n}\n\nfunction usePlace(): [\n\tIPlace,\n\t{\n\t\tsetTemperature: React.Dispatch<React.SetStateAction<number | undefined>>;\n\t\tsetHumidity: React.Dispatch<React.SetStateAction<number | undefined>>;\n\t}\n] {\n\tconst [temperature, setTemperature] = useState<number | undefined>();\n\tconst [humidity, setHumidity] = useState<number | undefined>();\n\n\treturn [\n\t\t{ temperature, humidity },\n\t\t{ setTemperature, setHumidity },\n\t];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport { render, hydrate } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nconst Application = (\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>\n);\n\nif (rootElement?.hasChildNodes()) {\n\thydrate(Application, rootElement);\n} else {\n\trender(Application, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}